# -*- coding: utf-8 -*-
"""ADS organized code

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iG42hVVy1kuY0OvcxTrcxZPs95p6-15C

# First, create all the functions and classes
"""

#1. Functions for users to sign up/log in:

users = {} #Create an empty dictionary where we are going to save the users. We used this to avoid duplicated usernames 

def sign_up():
  username = input('Type your new username:')
  while users.get(username, None) != None:
    print('That username is already taken! Please choose another one')
    username = input('Type your new username:')
  password = input('Type your new pasword:')
  users[username] = password 
  print('Account created. Log in now!')
  log_in()


def log_in():
  username = input('Username:')
  password = input('Password: ')
  x = users.get(username, None)
  if x == None:
    print('You dont have an account, sign up now!')
    sign_up()
  elif x == password:
    print('Youre logged in now')
    return
  else: 
    print('Wrong password, try logging in again please')
    log_in()

#2. Creating the Node class with its attributes

class GraphNode():
  def __init__(self, recipe, ingredients, cuisine, difficulty, link):
    self.recipe = recipe
    self.ingredients = ingredients
    self.cuisine = cuisine
    self.difficulty = difficulty
    self.link = link
    self.adjacencylist = []
    self.visited = False
    self.rating = None
    self.saved = False
  
  def __str__(self):
    return 'Recipe: {} \nIngredients: {} \nCuisine: {} \nDifficulty level: {} \nLink to full recipe: {}'.format(self.recipe, self.ingredients, self.cuisine, self.difficulty, self.link)
    

#Method to input a rating after user has done the recipe
  def inputrating(self):
    if self.rating == None:
      rating = eval(input("What rating would you give this recipe after making it?"))
      self.rating = rating
      return
    else:
      x = input('Do you want to leave your previous rating or input a new one? Type -leave- or -input-') #should be just a button in the GUI (leave or change)
      if x.lower() == 'leave':
        return
      else:
        rating = eval(input("What rating would you give this recipe after making it?"))
        self.rating = rating


#Depth-first search algorithm to show recommendations to user considering ingredients, cuisine preference and showing from easiest to hardest in 
#each cuisine: 
  def dfs(self): #the algorithm will always be ran starting at the startNode, no other nodes 
    self.visited = True
    for n in self.adjacencylist:
      if not n.visited:
        x = 0
        for key in n.ingredients:
          for i in availableIngredients: #list of ingredients inputed by user 
            if key == i:
                x = x + n.ingredients[key]
        if x >= 0.7: #Add it to the recommendated recipes if the user has 70% or + of the needed ingredients (in terms of importance)
          print(n)
          print()
        n.dfs()


#DFS algorithm to show the user all the recipes belonging to a specific cuisine, ignoring user's available ingredients:
  def showCuisine(self, chosenCuisine): #always beginning at startNode
    self.visited = True
    for n in self.adjacencylist:
      if not n.visited:
        if n.cuisine == chosenCuisine: 
          print(n)
          print()
        n.showCuisine(chosenCuisine)
    
#Breadth first search algorithm to show the user all the recipes from a specific difficulty level:
  def showDifficulty(self, difficulty):
    queue = []
    queue.append(self) 
    self.visited = True 
    while queue: 
      currentNode = queue.pop(0)
      if currentNode.difficulty == difficulty: 
        print(currentNode)
        print()
      for n in currentNode.adjacencylist:
        if not n.visited:
          n.visited = True
          queue.append(n)

  def setVisitedFalse(self): #if one of the algorithms is ran but the user wants to see recipes according to another condition 
  #(for example they're shown recipes considering their ingredients but now they only want to see italian recipes), now all the 
  #nodes have the visited attribute set to True because of the first algorithm so we need to set the visited attribute to false 
  #again if we want to run another algorithm. This function is to address that issue
    for n in self.adjacencylist:
      n.visited=False
      n.setVisitedFalse()

  
#Function for user to be able to save the recipe to access in the future whenever he/she wants:
  def saveRecipe(self):
    x = input('Save recipe? Type -yes- or -no-') #in the GUI this would just be a button, like a saving icon
    if self.saved == False:
      if x == 'yes':
        self.saved = True
    if self.saved == True:
      if x == 'no':
        self.saved = False
    #This more or less represents touching the saving button, if it is not saved and we want to save it it will be saved. If it is saved and we say we don't want it saved, we will 'unsave' it


#Method to display saved recipes. Would be ran when user clicks on the 'saved' section of the app.
  def savedRecipes(self): #Starting at the startNode, we check all the nodes in the graph and display them if saved is set =True
    for node in self.adjacencylist:
      if not node.visited:
        if node.saved == True:
          print(node)
        node.savedRecipes()

#3. Creating the functions that will be used to process the users' input regarding their ordered cuisine preferences:

def cuisineRecipe(cuisine, recipe): 
  if recipe.cuisine == cuisine:
    return recipe
  else:
    None

def finalAdjList(cuisineList, recipeList):
  x = []
  for i in cuisineList:
    for n in recipeList:
      if cuisineRecipe(i, n) != None:
        x.append(n)
  return x

"""# Creating Instarecipe's initial content, i.e. the graph where the recipes are saved"""

#1. Create the nodes

startNode = GraphNode('start node', {}, 'none', None, None) #this node is used as the starting point to run the traversal algorithms 

pestoPasta = GraphNode('Pesto pasta', {'pasta':0.5, 'pesto':0.4, 'cheese':0.1}, 'italian', 1, 'https://www.bbcgoodfood.com/recipes/easy-pesto-pasta')
focaccia = GraphNode('Focaccia', {'bread flour':0.4, 'yeast':0.4, 'salt':0, 'olive oil':0.2}, 'italian', 1, 'https://cookpad.com/uk/recipes/13129011-grandmas-focaccia')
margheritaPizza = GraphNode('Margherita pizza', {'pizza dough':0.5, 'tomato sauce':0.2, 'cheese':0.2, 'basil':0.1}, 'italian', 1, 'https://cookieandkate.com/margherita-pizza-recipe/')
bellini = GraphNode('Bellini', {'pasta':0.3, 'butter':0.1, 'flour':0.1, 'milk':0.1, 'egg':0.1, 'parmesan':0.1, 'salt':0, 'mozzarella':0.1, 'pepper':0.1}, 'italian', 1, 'https://dinnerthendessert.com/cheesy-florentine-pasta/')
parmesanMushroomsRisotto = GraphNode('Parmesan mushrooms risotto', {'butter':0.1, 'shallot':0.1, 'rice':0.4, 'mushroom':0.2, 'parmesan':0.2}, 'italian', 2,'https://www.allrecipes.com/recipe/85389/gourmet-mushroom-risotto/')
spicyKaleLasagna = GraphNode('Spicy kale lasagna', {'olive oil':0.1, 'tomato':0.1, 'cheese':0.1, 'lasagna noodle':0.4, 'kale':0.3}, 'italian', 2, 'https://www.acouplecooks.com/spicy-kale-lasagna/')
eggplantRolls = GraphNode('Egg plant rolls with spinach and ricotta', {'eggplant':0.3, 'olive oil':0.05, 'spinach':0.2, 'ricotta':0.2, 'tomato sauce':0.1, 'breadcrumb':0.1, 'parmesan':0.05}, 'italian', 2, 'https://hungryhappens.net/eggplant-rolls-with-mozzarella-and-prosciutto/')
chickenParmesan = GraphNode('Chicken Parmesan ', {'chicken':0.3, 'parmesan':0.2, 'parsley':0.05, 'garlic':0.05, 'egg':0.1, 'marinara sauce':0.1, 'olive oil':0.05, 'breadcrumb':0.1,'flour':0.05}, 'italian', 2, 'https://www.pinterest.es/pin/234961305547935769/')
shrimpMarinara = GraphNode('Shrimp pasta with marinara sauce', {'butter':0.1, 'parmesan':0.1, 'shrimp':0.3, 'spaghetti':0.4, 'basil':0.1}, 'italian', 3, 'https://www.acouplecooks.com/shrimp-marinara/')
italianMeatballs = GraphNode('Italian meatballs', {'ground beef':0.3, 'italian sausage':0.3, 'onion':0.05, 'garlic':0.05, 'egg':0.1, 'parmesan':0.05, 'olive oil':0.05, 'tomatoe':0.1}, 'italian', 3, 'https://www.recipetineats.com/classic-italian-meatballs-extra-soft-and-juicy/')


chickenTacos = GraphNode('Chicken tacos', {'salt':0,'chicken':0.3, 'tortilla':0.3, 'avocado':0.2, 'cheese':0.2}, 'mexican', 1,'https://www.delish.com/cooking/recipe-ideas/recipes/a58716/easy-chicken-tacos-recipe/')
cheeseBlackBeansQuesadilla = GraphNode('Cheese black bean quesadilla', {'black bean':0.3,'tortilla':0.4, 'cheese':0.3}, 'mexican', 1, 'https://www.budgetbytes.com/hearty-black-bean-quesadillas/')
guacamoleSalsa = GraphNode('Guacamole salsa',{'salt':0,'avocado':0.3,'onion':0.3,'tomato':0.2,'lime':0.2}, 'mexican', 1, 'https://www.bbcgoodfood.com/recipes/guacamole-salsa')
chickenFlautas = GraphNode('Chicken flautas', {'salt':0,'chicken':0.3,'tortilla':0.3, 'avocado':0.3,'lime':0.1}, 'mexican',2, 'https://www.delish.com/cooking/recipe-ideas/a39176258/chicken-flautas-recipe/')
fishTacos = GraphNode('Fish tacos',{'salt':0,'fish':0.3,'tortilla':0.3,'onion':0.1,'tomato':0.1,'avocado':0.2}, 'mexican',2,'https://www.simplyrecipes.com/recipes/fish_tacos/')
mexicanFiestaRice = GraphNode('Mexican fiesta rice', {'salt':0.0, 'onion':0.2, 'pepper':0.2, 'tomatoe':0.2, 'rice':0.4}, 'mexican', 2, 'https://www.bbcgoodfood.com/recipes/mexican-fiesta-rice')
cornSoup = GraphNode('Corn soup', {'corn':0.3, 'tomato':0.3, 'onion':0.3, 'lime':0.1}, 'mexican', 3,'https://www.averiecooks.com/easy-30-minute-homemade-chicken-tortilla-soup/')
chilliConCarne = GraphNode('Chilli con carne', {'salt':0,'onion':0.1, 'beef':0.3,'tomato':0.1,'kidney bean':0.3,'rice':0.2}, 'mexican', 3,'https://www.bbcgoodfood.com/recipes/chilli-con-carne-recipe')
burrito = GraphNode('Burrito',{'salt':0,'tortilla':0.2,'black bean':0.2,'beef':0.2,'tomato':0.1,'onion':0.1,'avocado':0.2}, 'mexican',3,'https://www.theseasonedmom.com/easiest-burrito-recipe/')
beefBirra = GraphNode('Beef Birra',{'salt':0,'beef':0.2,'pepper':0.2,'cumin':0.1,'garlic':0.1,'onion':0.1,'vinegar':0.2, 'cilantro':0.1}, 'mexican',3, 'https://www.mexicoinmykitchen.com/beef-birria-recipe/')

patatasBravas = GraphNode('Patatas bravas',{'potato':0.3, 'garlic':0.1,'onion':0.2,'tomato':0.1,'hot sauce':0.1,'lemon':0.1,'mayonnaise':0.1},'spanish',1,'https://spanishsabores.com/patatas-bravas-recipe-spanish-fried-potatoes-with-spicy-sauce/')
garlicMushroom = GraphNode('Garlic mushrooms',{'salt':0,'mushroom':0.4,'garlic':0.3,'lemon':0.1,'paprika':0.2},'spanish',1,'https://cafedelites.com/garlic-mushrooms/')
spanishTortilla = GraphNode('Spanish tortilla', {'salt':0,'egg':0.4, 'potato':0.3,'onion':0.3}, 'spanish', 2, 'https://cooking.nytimes.com/recipes/8849-spanish-tortilla')
spanishRice = GraphNode('Spanish rice',{'salt':0,'rice':0.3,'onion':0.2,'bell pepper':0.2,'garlic':0.05,'tomatoes':0.2,'lime':0.05}, 'spanish', 2,'https://lilluna.com/food-tutorial-spanish-rice/')
chickpeaStew = GraphNode('Chickpea stew',{'chickpeas':0.3,'chilli':0.2,'garlic':0.1,'onion':0.2,'spinach':0.2}, 'spanish',2,'https://spainonafork.com/spanish-chickpea-spinach-stew-recipe/')
squid = GraphNode('Squid',{'lemon':0.2,'egg':0.2,'squid':0.3,'flour':0.3}, 'spanish', 2,'https://leitesculinaria.com/17647/recipes-calamari-a-la-plancha.html')
salmorejo = GraphNode('Salmorejo',{'tomato':0.3,'garlic':0.1,'vinegar':0.3,'olive oil':0.1,'egg':0.2},'spanish',2,'https://eatingeuropean.com/salmorejo-spanish-cold-tomato-soup-recipe/')
lentilSoup = GraphNode('Lentil soup',{'salt':0,'lentil':0.3,'potato':0.3,'carrot':0.1,'garlic':0.1,'pork':0.2}, 'spanish', 2,'https://www.delish.com/cooking/recipe-ideas/recipes/a44787/easy-spinach-lentil-soup-recipe/')
paella = GraphNode('Paella', {'salt':0,'rice':0.3,'lobster':0.3,'onion':0.1,'garlic':0.1,'tomato':0.1,'green bean':0.1}, 'spanish',3,'https://tastesbetterfromscratch.com/paella/')
churros = GraphNode('Churros', {'butter':0.2,'vanilla extract':0.1,'flour':0.2,'milk':0.2,'chocolate':0.1,'baking powder':0.1}, 'spanish',3, 'https://www.bbcgoodfood.com/recipes/churros-chocolate-dipping-sauce')


sushi = GraphNode('Sushi', {'japanese rice':0.33, 'salmon':0.33, 'seaweed':0.34}, 'japanese', 1, 'https://www.fifteenspatulas.com/homemade-sushi/')
cauliflowerTempura = GraphNode('Cauliflower', {'cauliflower':0.7, 'flour':0.1, 'egg':0.1, 'olive oil':0.1}, 'japanese', 1,'https://food52.com/recipes/38531-cauliflower-tempura-with-sweet-chili-sauce')
yakitoriChicken = GraphNode('Yakitori chicken', {'skewer':0.2, 'soy sauce':0.1, 'chicken':0.4, 'sake':0.1, 'onion':0.1, 'sugar':0.1}, 'japanese', 1,'https://therecipecritic.com/yakitori-chicken/')
californiaMaki = GraphNode('California maki', {'japanese rice':0.2, 'nori sheet':0.2, 'salmon':0.2, 'avocado':0.2, 'cucumber':0.2}, 'japanese', 2,'https://www.yummy.ph/recipe/california-maki-recipe')
chickenTeriyaki = GraphNode('Chicken teriyaki', {'chicken':0.4, 'olive oil':0.1, 'soy sauce':0.1, 'sugar':0.1, 'vinegar':0.1, 'ginger':0.1, 'garlic':0.1}, 'japanese', 2, 'https://www.cookingclassy.com/teriyaki-chicken/')
sushiBurrito = GraphNode('Sushi burrito', {'salmon':0.1, 'tuna':0.1, 'japanese rice':0.2, 'cucumber':0.05, 'avocado':0.05, 'carrot':0.05, 'soy sauce':0.05, 'nori sheet':0.1, 'ginger':0.05}, 'japanese', 2,'https://www.feastingathome.com/sushi-burrito-recipe/')
japaneseKatsudon = GraphNode('Japenese katsudon', {'olive oil':0.05, 'onion':0.05, 'breaded pork fillet':0.3, 'soy sauce':0.05, 'sugar':0.05, 'egg':0.2, 'japanese rice':0.3}, 'japanese', 2,'https://thewoksoflife.com/katsudon/')
poachedBeafandNoodles = GraphNode('Poached beef and noodles', {'soy sauce':0.05, 'sake':0.05, 'carrot':0.2, 'sugar':0.05, 'onion':0.05, 'beef':0.3, 'noodle':0.3}, 'japanese', 3,'https://www.bbcgoodfood.com/recipes/poached-beef-noodles-gyudon')
tonkatsuPork = GraphNode('Tonkatsu pork', {'pork':0.4, 'flour':0.1, 'egg':0.2, 'olive oil':0.05, 'breadcrumb':0.1, 'ketchup':0.05, 'soy sauce':0.05, 'sugar':0.05}, 'japanese', 3,'https://www.justonecookbook.com/tonkatsu/')
ramen = GraphNode('Ramen', {'egg':0.1, 'chicken':0.1, 'pork':0.1, 'carrot':0.1, 'ramen noodle':0.2, 'carrot':0.1, 'onion':0.1, 'chilli':0.05, 'ginger':0.05, 'mushroom':0.1}, 'japanese', 3,'https://www.forkknifeswoon.com/simple-homemade-chicken-ramen/')


spicyChilly = GraphNode('Spicy chilly',{'garlic':0.2,'onion':0.2,'rice':0.3,'lime':0.1,'soy sauce':0.2}, 'thai', 1,'https://www.delicious.com.au/recipes/thai-spicy-chilli-basil-fried-rice/rd23hktd')
padThai = GraphNode('Pad thai',{'noodle':0.2,'chicken':0.2,'egg':0.2,'garlic':0.1,'soy sauce':0.2,'peanut':0.1}, 'thai', 1,'https://hot-thai-kitchen.com/best-pad-thai/')
beefFillet = GraphNode('Beef fillet',{'salt':0,'peanut':0.1,'chilli':0.2,'garlic':0.1,'beef':0.3,'ginger':0.1,'soy sauce':0.2}, 'thai',2,'https://www.allrecipes.com/recipe/234642/thai-beef/')
thaiChickenMeatballs = GraphNode('Thai chicken meatballs',{'chicken':0.2,'chilli':0.2,'lime':0.1,'curry':0.2,'egg':0.2,'peanut':0.1}, 'thai',2,'https://www.taste.com.au/recipes/thai-chicken-meatballs/rz9bjozu')
thaiChickenRisotto = GraphNode('Thai chicken risotto', {'salt':0,'chicken':0.2,'rice':0.2,'onion':0.1,'curry':0.2,'lime':0.1,'green bean':0.2}, 'thai', 2,'https://www.taste.com.au/recipes/thai-chicken-risotto/82741d33-8f0e-4112-916b-2b9c8a5c001d')
beefSalad = GraphNode('Beed salad', {'salt':0,'beef':0.2,'noodle':0.2,'carrot':0.1,'zucchini':0.1,'lime':0.1,'garlic':0.1,'sugar':0.1,'olive oil':0.1}, 'thai', 2,'https://www.recipetineats.com/thai-beef-salad-2/')
coconutCrab = GraphNode('Coconut crab',{'coconut':0.3,'crab':0.3,'lime':0.1,'sugar':0.1,'chilli':0.2}, 'thai',3,'https://www.thespruceeats.com/thai-crab-curry-recipe-1300541')
srirachaSalmon = GraphNode('Sriracha salmon',{'soy sauce':0.1,'chilli':0.1,'sriracha':0.2,'salmon':0.3,'ginger':0.1,'pea':0.1,'butter':0.1},'thai', 3,'https://chefsavvy.com/honey-sriracha-salmon/')
curryNoodleSoup = GraphNode('Curry noodle soup', {'curry':0.2,'noodle':0.2,'potato':0.05,'onion':0.5,'coconut':0.1,'rice':0.1,'fish':0.15,'lime':0.05}, 'thai', 3,'https://www.littlebroken.com/thai-noodle-soup/')
suki = GraphNode('Suki', {'rice noodle':0.2 ,'onion':0.1 ,'celery':0.1 , 'carrot':0.1 ,'salt':0, 'garlic':0.1 ,'pork':0.2, 'egg':0.1 ,'pepper':0.1}, 'thai', 3, 'https://www.bbcgoodfood.com/recipes/suki')


boiledEgg = GraphNode('Boiled eggs', {'egg':1, 'salt':0, 'water':0}, 'general/not specified', 1,'https://thestayathomechef.com/how-to-boil-eggs/')
tomatoSoup = GraphNode('Tomato Soup', {'tomato':0.3,'salt':0,'butter':0.2,'onion':0.2, 'salt':0.1, 'pepper':0.1, 'parsley':0.1}, 'general/not specified',1,'https://www.inspiredtaste.net/27956/easy-tomato-soup-recipe/')
arepas = GraphNode('Arepas', {'salt':0, 'milk':0.4, 'corn flour':0.6}, 'general/not specified', 1,'https://minimalistbaker.com/how-to-make-arepas/')
galloPinto = GraphNode('Gallo pinto', {'onion':0.1, 'avocado':0.2, 'tomato':0.1, 'rice':0.3, 'pepper':0.1, 'black bean':0.3}, 'general/not specified', 2,'https://stripedspatula.com/gallo-pinto/')
salmonInParchment = GraphNode('Salmon in parchement', {'salmon':0.6, 'sour cream':0.1, 'olive oil':0.1, 'lemon':0.1, 'salt':0.1}, 'general/not specified', 2,'https://www.allrecipes.com/recipe/229032/parchment-baked-salmon/')
lentilCurry = GraphNode('Lentil curry', {'oil':0.05, 'onion':0.05, 'curry':0.2, 'lentil':0.4, 'rice':0.2, 'carrot':0.1}, 'general/not specified', 2,'https://www.recipetineats.com/lentil-curry-mega-flavour-lentil-recipe/')
quicheLorraine = GraphNode('Quiche Lorraine', {'dough':0.4, 'smoked steaky bacon':0.1, 'cheddar':0.2, 'egg':0.2, 'sour cream':0.1}, 'general/not specified', 2,'https://www.bbcgoodfood.com/recipes/ultimate-quiche-lorraine')
donerKebab = GraphNode('Doner kebab', {'ground beef':0.4, 'yoghurt':0.1, 'milk':0.1, 'wrap':0.3, 'onion':0.05, 'garlic':0.05, 'salt':0}, 'general/not specified', 3,'https://www.bbcgoodfood.com/recipes/doner-kebab')
filetMignon = GraphNode('Filet Mignon', {'pork':0.5, 'vegetable broth':0.2, 'sour cream':0.1, 'mushroom':0.1, 'olive oil':0.05, 'butter':0.05}, 'general/not specified', 3, 'https://www.delish.com/cooking/recipe-ideas/a23515113/how-to-cook-filet-mignon/')
fishandchips = GraphNode('Fish and chips', {'fish':0.5, 'salt':0, 'breadcrumb':0.1, 'flour':0.1, 'potato':0.3}, 'general/not specified', 3,'https://www.thespruceeats.com/best-fish-and-chips-recipe-434856')

#2. Connecting the nodes to create the graph:

#After this point, each cuisine is a graph itself, they're not connected yet to the startNode because the order in which they go into the 
#startNode's adjacency list depends on the user's input of their prefered cuisines

# Italian cuisine:
pestoPasta.adjacencylist = [focaccia, parmesanMushroomsRisotto, shrimpMarinara]
focaccia.adjacencylist = [margheritaPizza, bellini]
parmesanMushroomsRisotto.adjacencylist = [spicyKaleLasagna, eggplantRolls, chickenParmesan]
shrimpMarinara.adjacencylist = [italianMeatballs]


# Mexican cuisine
chickenTacos.adjacencylist = [cheeseBlackBeansQuesadilla, chickenFlautas, cornSoup]
cheeseBlackBeansQuesadilla.adjacencylist = [guacamoleSalsa]
chickenFlautas.adjacencylist = [fishTacos, mexicanFiestaRice]
cornSoup.adjacencylist = [chilliConCarne, burrito, beefBirra]


# Spanish cuisine
patatasBravas.adjacencylist = [garlicMushroom, spanishTortilla, paella]
garlicMushroom.adjacencylist = []
spanishTortilla.adjacencylist = [spanishRice, chickpeaStew, squid, salmorejo, lentilSoup]
paella.adjacencylist = [churros]


# Japanese cuisine
sushi.adjacencylist = [cauliflowerTempura, californiaMaki, poachedBeafandNoodles]
cauliflowerTempura.adjacencylist = [yakitoriChicken]
californiaMaki.adjacencylist = [chickenTeriyaki, sushiBurrito, japaneseKatsudon]
poachedBeafandNoodles.adjacencylist = [tonkatsuPork, ramen]


# Thai cuisine
spicyChilly.adjacencylist = [padThai, beefFillet, coconutCrab]
padThai.adjacencylist = []
beefFillet.adjacencylist = [thaiChickenMeatballs, thaiChickenRisotto, beefSalad]
coconutCrab = [srirachaSalmon, curryNoodleSoup, suki]


# General
boiledEgg.adjacencylist = [tomatoSoup, galloPinto, donerKebab]
tomatoSoup.adjacencylist = [arepas]
galloPinto.adjacencylist = [salmonInParchment, lentilCurry, quicheLorraine]
donerKebab.adjacencylist = [filetMignon, fishandchips]

#3. Joining the whole graph together:

#After getting the user's list of cuisines through the GUI (in preference order, from favorite to least favorite), the list is saved in 
#a variable called 'cuisines'

cuisines = ['spanish', 'mexican', 'japanese', 'general/not specified', 'thai', 'italian'] 
#This is an example as if this was the user's input. In the input they can have all the cuisines 

firstDegree = [pestoPasta, chickenTacos, patatasBravas, sushi, spicyChilly, boiledEgg] #List with the nodes that are in the first degree connections with the startNode

#Run the functions to compare the cuisines list (user input) and the cuisine of each of the first degree connection nodes, to define the order in 
#which they will go in the adjacency list of the startNode, and then with this we will specify the adjacency list:

x = finalAdjList(cuisines, firstDegree)

startNode.adjacencylist = x

"""# Showing our users the recipes"""

#1. Run algorithm to show recipes according to their available ingredients, in order of cuisine preference and from easiest to hardest in 
#each of the cuisines:

#Use the GUI to get the user's input regarding their available ingredients. Save this in variable called 'availableIngredients'.

availableIngredients = ['pesto', 'pasta', 'white fish', 'potatoes', 'pork filet mignon', 'vegetable broth', 'sour cream', 'mushrooms', 'ground beef', 'wrap']
# Notes for the user: If you want to input your own ingredients, edit the list above.
startNode.dfs()

#2. Use the GUI to give the users the option to see recipes according to cuisine or difficulty level only, ignoring ingredients.


#a. When they want to see all the recipes belonging to a specific cuisine:
wantedCuisine = input("Which cuisine's recipes would you like to see?")

startNode.setVisitedFalse() #Run this before any traversal algorithm to set the visited attribute to false again
startNode.showCuisine(wantedCuisine)

#b. When they want to see all the recipes with a specific difficulty level:
wantedDifficulty = int(input("What difficulty level do you want the recipes to be? Select 1, 2 or 3"))

startNode.setVisitedFalse()
startNode.showDifficulty(wantedDifficulty)
